@model IEnumerable<EmployeeViewModel>

@{

    //Additional Feature: here we can use viewData to sent data from View To View(Layout) or From Action To View
    ViewData["Title"] = "All Employees";
    //the differnce between ViewData,ViewBag

    //ViewData is Faster
    // string VDataMessage = (string)ViewData["Message"];
    string VDataMessage2 = ViewData["Message"] as string;
    //Enforce Type Safety => Requires Casting [Strongly typed] need Casting


    string VBagMessage = ViewBag.Message; //no need for casting its based on Dynamic Keyword
                                                  //not Enforce Type Safety => not Requires Casting [Weekly type]



}

@{
    <div class=" alert alert-success">
        @ViewData["Message"]
    </div>
    <div class=" alert alert-warning">
        @ViewBag.Message
    </div>

    <a class=" btn btn-success m-2" asp-action="Create"> Create New Employee</a>

    <h1 class="bg-body-tertiary rounded rounded-4 m-2">
        ALL Employees
    </h1>
    <br />


    <form asp-action="Index" method="get">
        <div class="form-group d-flex ">
            <input class="form-control" type="text" name="Search" placeholder="Employee's Name" />
            <button type="submit" class="btn btn-light">Search</button>
        </div>

    </form>

    @if (Model.Count() > 0)
    {
        <table class="table table-striped table-hover mt-3 container">
            <thead>
                <tr>
                    <th>@Html.DisplayNameFor(E => E.Name)</th>
                    <th>@Html.DisplayNameFor(E => E.Image)</th>

                    <th>@Html.DisplayNameFor(E => E.Age)</th>
                    <th>@Html.DisplayNameFor(E => E.Salary)</th>
                    <th>@Html.DisplayNameFor(E => E.Department)</th>
                    <th>@Html.DisplayNameFor(E => E.Address)</th>
                    <th>@Html.DisplayNameFor(E => E.Email)</th>
                    <th>@Html.DisplayNameFor(E => E.PhoneNumber)</th>
                    <th>@Html.DisplayNameFor(E => E.HireDate)</th>
                    <th>@Html.DisplayNameFor(E => E.IsActive)</th>

                    <th>Details</th>
                    <th>Update</th>
                    <th>Delete</th>
                </tr>
            </thead>


            <tbody>
                @foreach (var employee in Model)
                {

                    <tr>
                        <td>@employee.Name</td>
                        <td><img src="~/Files/Images/@employee.ImageName" class="rounded" alt="Employee Image"  width="40" height="40"/></td>
                        <td>@employee.Age</td>
                        <td>@Html.DisplayFor(E => employee.Salary)</td>
                        <td>@Html.DisplayFor(E => employee.Department.Name)</td>
                        <td>@employee.Address</td>
                        <td>@Html.DisplayFor(E => employee.Email)</td>
                        <td>@employee.PhoneNumber</td>
                        <td>@employee.HireDate</td>

                        <td>
                            @{
                                if (employee.IsActive)
                                {
                                    <i class=" fa-solid fa-circle" style="color:green"></i>
                                }
                                else
                                {
                                    <i class=" fa-solid fa-circle" style="color:red"></i>
                                }
                            }
                        </td>

                        <partial name="_ButtonsPartialview" model="@employee.Id.ToString()" />
                    </tr>
                }

            </tbody>


        </table>


    }
    else
    {
        <div class=" mt-5 alert alert-warning">
            <h2>There Is No Employees</h2>
        </div>
    }

}


